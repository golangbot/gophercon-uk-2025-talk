// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package s3

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/s3"
	mock "github.com/stretchr/testify/mock"
)

// newMocks3Client creates a new instance of mocks3Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMocks3Client(t interface {
	mock.TestingT
	Cleanup(func())
}) *mocks3Client {
	mock := &mocks3Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mocks3Client is an autogenerated mock type for the s3Client type
type mocks3Client struct {
	mock.Mock
}

type mocks3Client_Expecter struct {
	mock *mock.Mock
}

func (_m *mocks3Client) EXPECT() *mocks3Client_Expecter {
	return &mocks3Client_Expecter{mock: &_m.Mock}
}

// CreateBucket provides a mock function for the type mocks3Client
func (_mock *mocks3Client) CreateBucket(ctx context.Context, params *s3.CreateBucketInput, optFns ...func(*s3.Options)) (*s3.CreateBucketOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBucket")
	}

	var r0 *s3.CreateBucketOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.CreateBucketInput, ...func(*s3.Options)) (*s3.CreateBucketOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.CreateBucketInput, ...func(*s3.Options)) *s3.CreateBucketOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.CreateBucketOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.CreateBucketInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mocks3Client_CreateBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBucket'
type mocks3Client_CreateBucket_Call struct {
	*mock.Call
}

// CreateBucket is a helper method to define mock.On call
//   - ctx context.Context
//   - params *s3.CreateBucketInput
//   - optFns ...func(*s3.Options)
func (_e *mocks3Client_Expecter) CreateBucket(ctx interface{}, params interface{}, optFns ...interface{}) *mocks3Client_CreateBucket_Call {
	return &mocks3Client_CreateBucket_Call{Call: _e.mock.On("CreateBucket",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *mocks3Client_CreateBucket_Call) Run(run func(ctx context.Context, params *s3.CreateBucketInput, optFns ...func(*s3.Options))) *mocks3Client_CreateBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.CreateBucketInput
		if args[1] != nil {
			arg1 = args[1].(*s3.CreateBucketInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *mocks3Client_CreateBucket_Call) Return(createBucketOutput *s3.CreateBucketOutput, err error) *mocks3Client_CreateBucket_Call {
	_c.Call.Return(createBucketOutput, err)
	return _c
}

func (_c *mocks3Client_CreateBucket_Call) RunAndReturn(run func(ctx context.Context, params *s3.CreateBucketInput, optFns ...func(*s3.Options)) (*s3.CreateBucketOutput, error)) *mocks3Client_CreateBucket_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBucket provides a mock function for the type mocks3Client
func (_mock *mocks3Client) DeleteBucket(ctx context.Context, params *s3.DeleteBucketInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteBucket")
	}

	var r0 *s3.DeleteBucketOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.DeleteBucketInput, ...func(*s3.Options)) (*s3.DeleteBucketOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.DeleteBucketInput, ...func(*s3.Options)) *s3.DeleteBucketOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.DeleteBucketOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.DeleteBucketInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mocks3Client_DeleteBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBucket'
type mocks3Client_DeleteBucket_Call struct {
	*mock.Call
}

// DeleteBucket is a helper method to define mock.On call
//   - ctx context.Context
//   - params *s3.DeleteBucketInput
//   - optFns ...func(*s3.Options)
func (_e *mocks3Client_Expecter) DeleteBucket(ctx interface{}, params interface{}, optFns ...interface{}) *mocks3Client_DeleteBucket_Call {
	return &mocks3Client_DeleteBucket_Call{Call: _e.mock.On("DeleteBucket",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *mocks3Client_DeleteBucket_Call) Run(run func(ctx context.Context, params *s3.DeleteBucketInput, optFns ...func(*s3.Options))) *mocks3Client_DeleteBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.DeleteBucketInput
		if args[1] != nil {
			arg1 = args[1].(*s3.DeleteBucketInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *mocks3Client_DeleteBucket_Call) Return(deleteBucketOutput *s3.DeleteBucketOutput, err error) *mocks3Client_DeleteBucket_Call {
	_c.Call.Return(deleteBucketOutput, err)
	return _c
}

func (_c *mocks3Client_DeleteBucket_Call) RunAndReturn(run func(ctx context.Context, params *s3.DeleteBucketInput, optFns ...func(*s3.Options)) (*s3.DeleteBucketOutput, error)) *mocks3Client_DeleteBucket_Call {
	_c.Call.Return(run)
	return _c
}

// HeadBucket provides a mock function for the type mocks3Client
func (_mock *mocks3Client) HeadBucket(context1 context.Context, headBucketInput *s3.HeadBucketInput, fns ...func(*s3.Options)) (*s3.HeadBucketOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, headBucketInput, fns)
	} else {
		tmpRet = _mock.Called(context1, headBucketInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for HeadBucket")
	}

	var r0 *s3.HeadBucketOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.HeadBucketInput, ...func(*s3.Options)) (*s3.HeadBucketOutput, error)); ok {
		return returnFunc(context1, headBucketInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.HeadBucketInput, ...func(*s3.Options)) *s3.HeadBucketOutput); ok {
		r0 = returnFunc(context1, headBucketInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.HeadBucketOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.HeadBucketInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(context1, headBucketInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mocks3Client_HeadBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadBucket'
type mocks3Client_HeadBucket_Call struct {
	*mock.Call
}

// HeadBucket is a helper method to define mock.On call
//   - context1 context.Context
//   - headBucketInput *s3.HeadBucketInput
//   - fns ...func(*s3.Options)
func (_e *mocks3Client_Expecter) HeadBucket(context1 interface{}, headBucketInput interface{}, fns ...interface{}) *mocks3Client_HeadBucket_Call {
	return &mocks3Client_HeadBucket_Call{Call: _e.mock.On("HeadBucket",
		append([]interface{}{context1, headBucketInput}, fns...)...)}
}

func (_c *mocks3Client_HeadBucket_Call) Run(run func(context1 context.Context, headBucketInput *s3.HeadBucketInput, fns ...func(*s3.Options))) *mocks3Client_HeadBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.HeadBucketInput
		if args[1] != nil {
			arg1 = args[1].(*s3.HeadBucketInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *mocks3Client_HeadBucket_Call) Return(headBucketOutput *s3.HeadBucketOutput, err error) *mocks3Client_HeadBucket_Call {
	_c.Call.Return(headBucketOutput, err)
	return _c
}

func (_c *mocks3Client_HeadBucket_Call) RunAndReturn(run func(context1 context.Context, headBucketInput *s3.HeadBucketInput, fns ...func(*s3.Options)) (*s3.HeadBucketOutput, error)) *mocks3Client_HeadBucket_Call {
	_c.Call.Return(run)
	return _c
}
